{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aaronwilson/Desktop/wd5-2107-FamilySocialApp/reactjs/src/pages/postForm/index.js\";\nimport 'easymde/dist/easymde.min.css';\nimport styles from './postForm.module.css';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from 'bloomer/lib/elements/Form/Input';\nimport SimpleMDE from 'react-simplemde-editor';\nimport ReactEvents from 'react-tag-autocomplete';\nimport eventData from '../../exampleData/events.json';\nimport postData from '../../exampleData/posts.json';\n\nclass CreatePost extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleMarkdownChange = value => {\n      this.setState({\n        content: value\n      });\n    };\n\n    this.handleInputChange = event => {\n      // pull the name of the input and value of input out of the event object\n      const {\n        target: {\n          name,\n          value\n        }\n      } = event; // update the state to a key of the name of the input and value of the value of the input\n      // ex: type: 'private'\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleDelete = i => {\n      const {\n        events\n      } = this.state;\n      const newEvents = [...events];\n      newEvents.splice(i, 1);\n      this.setState({\n        events: newEvents\n      });\n    };\n\n    this.handleAddition = event => {\n      const {\n        post: {\n          events: defaultEvents = []\n        }\n      } = this.props;\n      const {\n        events = defaultEvents\n      } = this.state;\n      const newEvents = [...events, event];\n      this.setState({\n        events: newEvents\n      });\n    };\n\n    this.onSubmit = () => {\n      const {\n        content,\n        events,\n        title\n      } = this.state;\n      const {\n        history,\n        post: {\n          id\n        },\n        savePost\n      } = this.props;\n      savePost({\n        content,\n        events,\n        id,\n        title\n      });\n      history.push('/posts');\n    };\n\n    const {\n      fetchPost,\n      match: {\n        params: {\n          postId\n        }\n      }\n    } = this.props;\n\n    if (postId) {\n      fetchPost(postId);\n    }\n\n    this.state = {};\n  }\n\n  render() {\n    const {\n      post: {\n        title: defaultTitle = '',\n        content: defaultContent = '',\n        events: defaultEvents = []\n      },\n      match: {\n        params: {\n          postId\n        }\n      },\n      suggestions\n    } = this.props;\n    const {\n      content = defaultContent,\n      events = defaultEvents,\n      title = defaultTitle\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.createPost,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: styles.heading,\n        children: postId ? 'Edit Post' : 'Create a New Post'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        className: styles.input,\n        name: \"title\",\n        value: title,\n        onChange: this.handleInputChange,\n        placeholder: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SimpleMDE, {\n        value: content,\n        onChange: this.handleMarkdownChange,\n        options: {\n          autofocus: true,\n          previewClass: [styles.preview, 'editor-preview'],\n          spellChecker: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactEvents, {\n        events: events,\n        suggestions: suggestions,\n        handleDelete: this.handleDelete,\n        handleAddition: this.handleAddition,\n        allowNew: true,\n        classNames: {\n          root: styles.events,\n          rootFocused: styles.isFocused,\n          search: styles.eventsSearch,\n          searchInput: styles.eventsSearchInput,\n          selected: styles.eventsSelected,\n          selectedEvent: styles.eventsSelectedEvent,\n          selectedEventName: styles.eventsSelectedEventName,\n          suggestionActive: styles.isActive,\n          suggestionDisabled: styles.isDisabled,\n          suggestions: styles.eventsSuggestions\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: this.onSubmit,\n        className: styles.button,\n        children: \"Save Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nCreatePost.propTypes = {\n  fetchPost: PropTypes.func,\n  post: PropTypes.shape({\n    content: PropTypes.string,\n    events: PropTypes.arrayOf(PropTypes.object),\n    id: PropTypes.string,\n    title: PropTypes.string\n  }),\n  savePost: PropTypes.func,\n  suggestions: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string\n  }))\n};\nCreatePost.defaultProps = {\n  fetchPost: () => {},\n  post: postData[0],\n  savePost: () => {},\n  suggestions: eventData\n};\nexport default CreatePost;","map":{"version":3,"sources":["/Users/aaronwilson/Desktop/wd5-2107-FamilySocialApp/reactjs/src/pages/postForm/index.js"],"names":["styles","React","Component","PropTypes","Input","SimpleMDE","ReactEvents","eventData","postData","CreatePost","constructor","props","handleMarkdownChange","value","setState","content","handleInputChange","event","target","name","handleDelete","i","events","state","newEvents","splice","handleAddition","post","defaultEvents","onSubmit","title","history","id","savePost","push","fetchPost","match","params","postId","render","defaultTitle","defaultContent","suggestions","createPost","heading","input","autofocus","previewClass","preview","spellChecker","root","rootFocused","isFocused","search","eventsSearch","searchInput","eventsSearchInput","selected","eventsSelected","selectedEvent","eventsSelectedEvent","selectedEventName","eventsSelectedEventName","suggestionActive","isActive","suggestionDisabled","isDisabled","eventsSuggestions","button","propTypes","func","shape","string","arrayOf","object","defaultProps"],"mappings":"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","sourcesContent":["import 'easymde/dist/easymde.min.css';\nimport styles from './postForm.module.css';\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Input } from 'bloomer/lib/elements/Form/Input';\nimport SimpleMDE from 'react-simplemde-editor';\nimport ReactEvents from 'react-tag-autocomplete';\n\nimport eventData from '../../exampleData/events.json';\nimport postData from '../../exampleData/posts.json';\n\nclass CreatePost extends Component {\n  constructor(props) {\n    super(props);\n    const {\n      fetchPost,\n      match: {\n        params: { postId },\n      },\n    } = this.props;\n    if (postId) {\n      fetchPost(postId);\n    }\n    this.state = {};\n  }\n\n  handleMarkdownChange = (value) => {\n    this.setState({\n      content: value,\n    });\n  };\n\n  handleInputChange = (event) => {\n    // pull the name of the input and value of input out of the event object\n    const {\n      target: { name, value },\n    } = event;\n    // update the state to a key of the name of the input and value of the value of the input\n    // ex: type: 'private'\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleDelete = (i) => {\n    const { events } = this.state;\n    const newEvents = [...events];\n    newEvents.splice(i, 1);\n    this.setState({ events: newEvents });\n  };\n\n  handleAddition = (event) => {\n    const {\n      post: { events: defaultEvents = [] },\n    } = this.props;\n    const { events = defaultEvents } = this.state;\n    const newEvents = [...events, event];\n    this.setState({ events: newEvents });\n  };\n\n  onSubmit = () => {\n    const { content, events, title } = this.state;\n    const {\n      history,\n      post: { id },\n      savePost,\n    } = this.props;\n    savePost({ content, events, id, title });\n    history.push('/posts');\n  };\n\n  render() {\n    const {\n      post: {\n        title: defaultTitle = '',\n        content: defaultContent = '',\n        events: defaultEvents = [],\n      },\n      match: {\n        params: { postId },\n      },\n      suggestions,\n    } = this.props;\n    const {\n      content = defaultContent,\n      events = defaultEvents,\n      title = defaultTitle,\n    } = this.state;\n    return (\n      <div className={styles.createPost}>\n        <h1 className={styles.heading}>\n          {postId ? 'Edit Post' : 'Create a New Post'}\n        </h1>\n        <Input\n          className={styles.input}\n          name=\"title\"\n          value={title}\n          onChange={this.handleInputChange}\n          placeholder=\"Title\"\n        />\n        <SimpleMDE\n          value={content}\n          onChange={this.handleMarkdownChange}\n          options={{\n            autofocus: true,\n            previewClass: [styles.preview, 'editor-preview'],\n            spellChecker: true,\n          }}\n        />\n        <ReactEvents\n          events={events}\n          suggestions={suggestions}\n          handleDelete={this.handleDelete}\n          handleAddition={this.handleAddition}\n          allowNew\n          classNames={{\n            root: styles.events,\n            rootFocused: styles.isFocused,\n            search: styles.eventsSearch,\n            searchInput: styles.eventsSearchInput,\n            selected: styles.eventsSelected,\n            selectedEvent: styles.eventsSelectedEvent,\n            selectedEventName: styles.eventsSelectedEventName,\n            suggestionActive: styles.isActive,\n            suggestionDisabled: styles.isDisabled,\n            suggestions: styles.eventsSuggestions,\n          }}\n        />\n        <button type=\"button\" onClick={this.onSubmit} className={styles.button}>\n          Save Post\n        </button>\n      </div>\n    );\n  }\n}\n\nCreatePost.propTypes = {\n  fetchPost: PropTypes.func,\n  post: PropTypes.shape({\n    content: PropTypes.string,\n    events: PropTypes.arrayOf(PropTypes.object),\n    id: PropTypes.string,\n    title: PropTypes.string,\n  }),\n  savePost: PropTypes.func,\n  suggestions: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n    })\n  ),\n};\n\nCreatePost.defaultProps = {\n  fetchPost: () => {},\n  post: postData[0],\n  savePost: () => {},\n  suggestions: eventData,\n};\n\nexport default CreatePost;\n"]},"metadata":{},"sourceType":"module"}