{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar classNames = require(\"classnames\");\n\nvar React = require(\"react\");\n\nvar bulma_1 = require(\"./../bulma\");\n\nvar helpers_1 = require(\"./../helpers\");\n\nfunction Button(props) {\n  var className = classNames('button', tslib_1.__assign({\n    'is-inverted': props.isInverted,\n    'is-link': props.isLink,\n    'is-outlined': props.isOutlined,\n    'is-static': props.isStatic\n  }, helpers_1.combineModifiers(props, bulma_1.getStateModifiers, bulma_1.getColorModifiers, bulma_1.getLoadingModifiers, bulma_1.getSizeModifiers)), props.className);\n\n  var render = props.render,\n      isLink = props.isLink,\n      isOutlined = props.isOutlined,\n      isInverted = props.isInverted,\n      isStatic = props.isStatic,\n      rest = tslib_1.__rest(props, [\"render\", \"isLink\", \"isOutlined\", \"isInverted\", \"isStatic\"]);\n\n  var HTMLProps = helpers_1.getHTMLProps(rest, bulma_1.removeStateProps, bulma_1.removeColorProps, bulma_1.removeLoadingProps, bulma_1.removeSizeProps);\n  if (render) return render(tslib_1.__assign({}, HTMLProps, {\n    className: className\n  }));\n  var anchor = React.createElement(\"a\", tslib_1.__assign({}, HTMLProps, {\n    role: \"button\",\n    className: className\n  }));\n  var button = React.createElement(\"button\", tslib_1.__assign({}, HTMLProps, {\n    type: props.type || 'button',\n    className: className\n  }));\n  return props.href ? anchor : button;\n}\n\nexports.Button = Button;\nvar HOC = bulma_1.withHelpersModifiers(Button);\nexports.default = HOC;","map":{"version":3,"sources":["../../src/elements/Button.tsx"],"names":[],"mappings":";;;;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAMA,IAAA,SAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAWA,SAAA,MAAA,CAAuB,KAAvB,EAA2E;AACvE,MAAM,SAAS,GAAG,UAAU,CACxB,QADwB,EAChB,OAAA,CAAA,QAAA,CAAA;AAEJ,mBAAe,KAAK,CAAC,UAFjB;AAGJ,eAAW,KAAK,CAAC,MAHb;AAIJ,mBAAe,KAAK,CAAC,UAJjB;AAKJ,iBAAa,KAAK,CAAC;AALf,GAAA,EAMD,SAAA,CAAA,gBAAA,CAAiB,KAAjB,EAAwB,OAAA,CAAA,iBAAxB,EAA2C,OAAA,CAAA,iBAA3C,EAA8D,OAAA,CAAA,mBAA9D,EAAmF,OAAA,CAAA,gBAAnF,CANC,CADgB,EASxB,KAAK,CAAC,SATkB,CAA5B;;AAWQ,MAAA,MAAA,GAAA,KAAA,CAAA,MAAA;AAAA,MAAQ,MAAA,GAAA,KAAA,CAAA,MAAR;AAAA,MAAgB,UAAA,GAAA,KAAA,CAAA,UAAhB;AAAA,MAA4B,UAAA,GAAA,KAAA,CAAA,UAA5B;AAAA,MAAwC,QAAA,GAAA,KAAA,CAAA,QAAxC;AAAA,MAAkD,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA,QAAA,EAAA,QAAA,EAAA,YAAA,EAAA,YAAA,EAAA,UAAA,CAAA,CAAlD;;AACR,MAAM,SAAS,GAAG,SAAA,CAAA,YAAA,CACd,IADc,EAEd,OAAA,CAAA,gBAFc,EAGd,OAAA,CAAA,gBAHc,EAId,OAAA,CAAA,kBAJc,EAKd,OAAA,CAAA,eALc,CAAlB;AAQA,MAAI,MAAJ,EAAY,OAAO,MAAM,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EAAM,SAAN,EAAe;AAAE,IAAA,SAAS,EAAA;AAAX,GAAf,CAAA,CAAb;AAEZ,MAAM,MAAM,GACR,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EAAO,SAAP,EAAgB;AAAE,IAAA,IAAI,EAAC,QAAP;AAAgB,IAAA,SAAS,EAAE;AAA3B,GAAhB,CAAA,CADJ;AAIA,MAAM,MAAM,GACR,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EAAY,SAAZ,EAAqB;AAAE,IAAA,IAAI,EAAE,KAAK,CAAC,IAAN,IAAc,QAAtB;AAAgC,IAAA,SAAS,EAAE;AAA3C,GAArB,CAAA,CADJ;AAIA,SAAO,KAAK,CAAC,IAAN,GAAa,MAAb,GAAsB,MAA7B;AACH;;AAhCD,OAAA,CAAA,MAAA,GAAA,MAAA;AAkCA,IAAM,GAAG,GAAgB,OAAA,CAAA,oBAAA,CAAqB,MAArB,CAAzB;AACA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar classNames = require(\"classnames\");\nvar React = require(\"react\");\nvar bulma_1 = require(\"./../bulma\");\nvar helpers_1 = require(\"./../helpers\");\nfunction Button(props) {\n    var className = classNames('button', tslib_1.__assign({ 'is-inverted': props.isInverted, 'is-link': props.isLink, 'is-outlined': props.isOutlined, 'is-static': props.isStatic }, helpers_1.combineModifiers(props, bulma_1.getStateModifiers, bulma_1.getColorModifiers, bulma_1.getLoadingModifiers, bulma_1.getSizeModifiers)), props.className);\n    var render = props.render, isLink = props.isLink, isOutlined = props.isOutlined, isInverted = props.isInverted, isStatic = props.isStatic, rest = tslib_1.__rest(props, [\"render\", \"isLink\", \"isOutlined\", \"isInverted\", \"isStatic\"]);\n    var HTMLProps = helpers_1.getHTMLProps(rest, bulma_1.removeStateProps, bulma_1.removeColorProps, bulma_1.removeLoadingProps, bulma_1.removeSizeProps);\n    if (render)\n        return render(tslib_1.__assign({}, HTMLProps, { className: className }));\n    var anchor = (React.createElement(\"a\", tslib_1.__assign({}, HTMLProps, { role: \"button\", className: className })));\n    var button = (React.createElement(\"button\", tslib_1.__assign({}, HTMLProps, { type: props.type || 'button', className: className })));\n    return props.href ? anchor : button;\n}\nexports.Button = Button;\nvar HOC = bulma_1.withHelpersModifiers(Button);\nexports.default = HOC;\n//# sourceMappingURL=Button.js.map"]},"metadata":{},"sourceType":"script"}